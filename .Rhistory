xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[150]
pca.train = home_encoded
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[180]
home_encoded_features = home_encoded[2, ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
home_encoded_features = home_encoded[1, ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
home_encoded_features = home_encoded
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[180]
home_encoded_features = home_encoded[,2:ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[180]
home_encoded_features = home_encoded[,2:ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[150]
home_encoded_features = home_encoded[,2:ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[160]
home_encoded_features = home_encoded[,2:ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[170]
home_encoded_features = home_encoded[,2:ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[300]
home_encoded_features = home_encoded[,2:ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[290]
home_encoded_features = home_encoded[,2:ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
cumsum(prop_varex)[250]
scatterplot(SalePrice ~ YrSold, data=train,  xlab="Year Sold", ylab="Sale Price", grid=FALSE)
library(car)
library(car)
plot(SalePrice ~ YrSold, data=train,  xlab="Year Sold", ylab="Sale Price", grid=FALSE)
plot(SalePrice ~ YrSold, data=home,  xlab="Year Sold", ylab="Sale Price", grid=FALSE)
plot(SalePrice ~ YrSold, data=home,  xlab="Year Sold", ylab="Sale Price")
wrong_categories = ["YearBuilt", "YearRemodAdd","GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass"]
wrong_categories = c("YearBuilt", "YearRemodAdd","GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {
home$category = lapply(home$category, factor)}
wrong_categories = c("YearBuilt", "YearRemodAdd","GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {
home$category = as.factor(home$category, factor)}
wrong_categories = c("YearBuilt", "YearRemodAdd","GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {
home$category = as.factor(home$category)}
home$MSSubClass = as.factor(home$MSSubClass)
home$YearBuilt = as.factor(home$YearBuilt)
wrong_categories = list("YearBuilt", "YearRemodAdd","GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {
home$category = as.factor(home$category)}
wrong_categories = list("YearBuilt", "YearRemodAdd","GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
typeof(wrong_categories)
for (category in wrong_categories) {
home$category = as.factor(home$category)}
wrong_categories = list("YearBuilt", "YearRemodAdd") #"GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {home$category = as.factor(home$category)}
wrong_categories = list("YearBuilt")# "YearRemodAdd", "GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {home$category = as.factor(home$category)}
home$wrong_categories[1]
home$colnames(home)[1]
home$colnames(home)[1]
colnames(home)
colnames(home)[1]
name = colnames(home)[1]
home$name
wrong_categories = c("YearBuilt", "YearRemodAdd", "GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {home$category = as.factor(home$category)}
wrong_categories = c("YearBuilt", "YearRemodAdd", "GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {home[,category] = as.factor(home[,category])}
knitr::opts_chunk$set(echo = TRUE)
wrong_categories = c("YearBuilt", "YearRemodAdd", "GarageYrBlt", "MoSold", "YrSold", "MSZoning", "MSSubClass")
for (category in wrong_categories) {home[,category] = as.factor(home[,category])}
# Doing a pairplot for 10 features
pairs(home[1:10])
# Plot histogram grid
nums = unlist(lapply(home, is.numeric))
home_numerical = (home[ , nums])
dim(home_numerical)
#home_numerical = as.data.frame(matrix(unlist(home_numerical), nrow=length(home_numerical), byrow=T))
wrong_categories = c( "MSZoning") #, "YearBuilt", "YearRemodAdd", "GarageYrBlt", "MoSold", "YrSold", "MSSubClass")
#for (category in wrong_categories) {home[,category] = as.factor(home[,category])}
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname])}
par(mfrow=c(1,3))
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname])}
par(mfrow=c(1,3))
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname], main = colname)}
par(mfrow=c(1,3))
boxplot(home_numerical)
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname], main = colname)}
par(mfrow=c(1,3))
boxplot(home_numerical[,2:ncol(home_numerical)])
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname], main = colname)}
par(mfrow=c(1,3))
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname], main = colname)
boxplot(home_numerical[,colname], main = colname)}
par(mfrow=c(1,4))
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname], main = colname)
boxplot(home_numerical[,colname], main = colname)}
par(mfrow=c(1,2))
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname], main = colname)
boxplot(home_numerical[,colname], main = colname)}
home_encoded_features = home_encoded[,2:ncol(home_encoded)]
pca.train = home_encoded_features # excluding SalePrice from the PCA
prin_comp = prcomp(pca.train, center = TRUE, scale. = TRUE)
# Compute standard deviation of each principal component
std_dev = prin_comp$sdev
# Compute variance
pr_var = std_dev^2
prop_varex = pr_var/sum(pr_var)
# Cumulative scree plot
plot(cumsum(prop_varex),
xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
abline(h=1, col='red')
abline(v=200, col='black', lty = 3)
# Example of very correlated feature : location of the home -> do a boxplot per location MSZoning
library(ggplot2)
ggplot(home) + aes(x=MSZoning, y=SalePrice) + geom_boxplot()
# Example of very correlated feature : location of the home -> do a boxplot per location MSZoning
library(ggplot2)
ggplot(home, aes(x=MSZoning, y=SalePrice, colour=MSZoning, group = MSZoning, fill = MSZoning) + geom_boxplot()
# Example of very correlated feature : location of the home -> do a boxplot per location MSZoning
library(ggplot2)
ggplot(home, aes(x=MSZoning, y=SalePrice, colour=MSZoning, group = MSZoning, fill = MSZoning)) + geom_boxplot()
# Example of very correlated feature : location of the home -> do a boxplot per location MSZoning
library(ggplot2)
ggplot(home, aes(x=MSZoning, y=SalePrice, colour=MSZoning, group = MSZoning, fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0)
# Example of very correlated feature : location of the home -> do a boxplot per location MSZoning
library(ggplot2)
ggplot(home, aes(x=MSZoning, y=SalePrice, colour=MSZoning, group = MSZoning, fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.25)+ stat_summary(fun.y=mean, colour="black", geom="point",shape=18, size=3)
# Example of very correlated feature : location of the home -> do a boxplot per location MSZoning
library(ggplot2)
ggplot(home, aes(x=MSZoning, y=SalePrice, colour=MSZoning, group = MSZoning, fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)+ stat_summary(fun.y=mean, colour="black", geom="point",shape=18, size=3)
# Example of very correlated feature : location of the home -> do a boxplot per location MSZoning
library(ggplot2)
ggplot(home, aes(x=MSZoning, y=SalePrice, colour=MSZoning, group = MSZoning, fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
# Try to find the law of the most correlated variables
par(mfrow=c(1,2))
hist(home$OverallQual, prob = TRUE)
d = density(home$OverallQual)
lines(d, col='red')
uniform = runif(n=1640,min = 1, max=10)
qqplot(home$OverallQual, uniform) # does not follow a uniform law but not a normal law either
# Example of not correlated feature : condition of the garage
ggplot(home,
aes(x=GarageCond,
y=SalePrice,
colour=GarageCond,
group = GarageCond,
fill = GarageCond))
+ geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
# Example of not correlated feature : condition of the garage
ggplot(home,
aes(x=GarageCond,
y=SalePrice,
colour=GarageCond,
group = GarageCond,
fill = GarageCond)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
# Example of very correlated feature : location of the home.
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
abline(h = mean(home$MSZoning), col = 'black')
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
abline(h =mean(home$MSZoning))
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
abline(h =mean(home$SalePrice, col='black')
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
abline(h=mean(home$SalePrice, col='black')
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
abline(h=mean(home$SalePrice), col='black')
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
mean(home$SalePrice)
#abline(h=, col='black')
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
mean_price = mean(home$SalePrice)
abline(h= mean_price, col='black')
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
mean_price = mean(home$SalePrice)
abline(h= mean_price, col='black', add = TRUE)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
mean_price = mean(home$SalePrice)
abline(h= mean_price, col='black', data = home)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1) + abline(h= mean_price, col='black', data = home)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1) + geom_abline(h= mean_price, col='black', data = home))
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1) + geom_abline(h= mean_price, col='black', data = home)
mean_price = mean(home$SalePrice)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1) + geom_abline(h= mean(home$SalePrice), col='black', data = home)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1) + geom_abline(h= mean(home$SalePrice), col='black', data = home)
mean(home$SalePrice)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1) + geom_abline(h= mean(home$SalePrice), col='black')
mean(home$SalePrice)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1) + geom_abline(h= 180921, col='black')
mean(home$SalePrice)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1) + geom_abline(h= 180921200, col='black')
mean(home$SalePrice)
mod1<-lm(Width ~ Location-1 , data=jellyfish)
mod1<-lm(SalePrice ~ MSZoning-1 , data=home)
anova(mod1)
mod2<-lm(SalePrice ~ GarageCond-1 , data=home)
anova(mod2)
#
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
head(home)
home$LotArea
head(home)
local = Poisson(0.77)
x <- seq(0,2.5,0.01)
d <- dgamma(x, shape=3, rate=5)
plot(x,d, type = 'l', main = 'Graph of the Gamma(3,5) distribution')
knitr::opts_chunk$set(echo = TRUE)
# 3 anova tests with a classical linear model
library(MASS)
# Forward method : problem with our reg0 that I dont find
reg0=lm(SalePrice~1, data=home_encoded)
linear_select_variables_forward = stepAIC(reg0, SalePrice~., data=home_encoded, trace=T, direction=c("forward"))
summary(linear_select_variables_forward)
install.packages(c("car", "fastDummies"))
par(mfrow=c(1,2))
for (colname in colnames(home_numerical)) {
hist(home_numerical[,colname], main = colname)
boxplot(home_numerical[,colname], main = colname)}
# Plot histogram grid
nums = unlist(lapply(home, is.numeric))
home_numerical = (home[ , nums])
home_numerical_output = home_numerical$SalePrice
home_numerical_features = home_numerical[,2:ncol(home_numerical)] # we will perform the PCA analysis on this dataset.
# Both method
linear_select_variables_both = stepAIC(reg0, SalePrice~., data=home_encoded, trace=TRUE, direction=c("both"))
summary(linear_select_variables_both)
# Backward method
linear_select_variables_backward = stepAIC(linear_reg,~., trace=TRUE, direction=c("backward") )
extractAIC(linear_select_variables_forward)
extractAIC(linear_select_variables_backward)
# 3 anova tests with a classic linear model
library(MASS)
# Forward method : problem with our reg0 that I dont find
reg0=lm(SalePrice~1, data=home_encoded)
linear_select_variables_forward = stepAIC(reg0, SalePrice~., data=home_encoded, trace=T, direction=c("forward"))
summary(linear_select_variables_forward)
# Backward method
linear_select_variables_backward = stepAIC(linear_reg,~., trace=TRUE, direction=c("backward") )
# Define a linear model using all features : we absolutely need to remove the last dummy
linear_reg=lm(SalePrice~., data=home_encoded)
summary(linear_reg)
# Backward method
linear_select_variables_backward = stepAIC(linear_reg,~., trace=TRUE, direction=c("backward") )
