home = train[,2:ncol(train)]
#head(home)
home$OverallQual = as.factor(home$OverallQual)
home$OverallCond = as.factor(home$OverallCond)
home$MoSold = as.factor(home$MoSold)
home$MSSubClass = as.factor(home$MSSubClass)
home$Fireplaces = as.factor(home$Fireplaces)
# head(home)
# Some elementary pruning and regrouping of categories
# Regrouping neighbourhoods of less than 20 and 50 sales together
table_neighborhood= table(home$Neighborhood)
table_neighborhood[order(table_neighborhood)]
levels(home$Neighborhood) <- c(levels(home$Neighborhood), "N_Under20Sales","N_Under50Sales")
home$Neighborhood[home$Neighborhood %in% c("Blueste","NPkVill","Veenker","BrDale","Blmngtn","MeadowV")] = "N_Under20Sales"
home$Neighborhood[home$Neighborhood %in% c("StoneBr","SWISU","ClearCr","IDOTRR","Timber","NoRidge","Mitchel")] = "N_Under50Sales"
# Roofstyle
table(home$RoofStyle)[order(table(home$RoofStyle))]
levels(home$RoofStyle) <- c(levels(home$RoofStyle), "RS_Other")
home$RoofStyle[home$RoofStyle %in% c("Shed","Mansard","Gambrel","Flat")] = "RS_Other"
# Condition 1
table(home$Condition1)[order(table(home$Condition1))]
levels(home$Condition1) <- c(levels(home$Condition1), "C_Other")
home$Condition1[home$Condition1 %in% c("RRNe","RRNn","PosA","RRAe","PosN","RRAn","Artery")] = "C_Other"
# ExterCond
table(home$ExterCond)[order(table(home$ExterCond))]
levels(home$ExterCond) <- c(levels(home$ExterCond), "EC_Other")
home$ExterCond[home$ExterCond %in% c("Po", "Ex", "Fa", "Gd")] = "EC_Other"
# OverallQual
#table(home$OverallQual)
#levels(home$OverallQual) <- c(levels(home$OverallQual), "Very_Low")
#home$OverallQual[home$OverallQual %in% c("-4.27238846180047", "-3.28279659466729", "-2.38962301582022")] = "Very_Low"
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Exterior1st", "Exterior2nd", "Electrical", "SaleCondition", "BsmtFinType2", "Heating","RoofStyle", "GarageCond", "ExterQual", "HeatingQC", "Functional", "OverallCond")
for (name in col_to_remove){cat(which(colnames(home)==name)," ")}
home_streamlined = home[-c(5, 8, 21, 13, 22, 23, 40, 66, 34, 37, 20, 59, 26, 38, 51, 17 )]
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
# Roofstyle
table(home$RoofStyle)[order(table(home$RoofStyle))]
levels(home$RoofStyle) <- c(levels(home$RoofStyle), "RS_Other")
home$RoofStyle[home$RoofStyle %in% c("Shed","Mansard","Gambrel","Flat")] = "RS_Other"
# Condition 1
table(home$Condition1)[order(table(home$Condition1))]
levels(home$Condition1) <- c(levels(home$Condition1), "C_Other")
home$Condition1[home$Condition1 %in% c("RRNe","RRNn","PosA","RRAe","PosN","RRAn","Artery")] = "C_Other"
# ExterCond
table(home$ExterCond)[order(table(home$ExterCond))]
levels(home$ExterCond) <- c(levels(home$ExterCond), "EC_Other")
home$ExterCond[home$ExterCond %in% c("Po", "Ex", "Fa", "Gd")] = "EC_Other"
# OverallQual
table(home$OverallQual)
levels(home$OverallQual) <- c(levels(home$OverallQual), "Very_Low")
home$OverallQual[home$OverallQual %in% c("-4.27238846180047", "-3.28279659466729", "-2.38962301582022")] = "Very_Low"
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "Exterior1st", "Exterior2nd", "SaleCondition", "BsmtFinType2", ,"RoofStyle", "GarageCond", "ExterQual", "HeatingQC", , "OverallCond")
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "Exterior1st", "Exterior2nd", "SaleCondition", "BsmtFinType2", ,"RoofStyle", "GarageCond", "ExterQual", "HeatingQC", , "OverallCond")
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "Exterior1st", "Exterior2nd", "SaleCondition", "BsmtFinType2", ,"RoofStyle", "GarageCond", "ExterQual", "HeatingQC", "OverallCond")
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "Exterior1st", "Exterior2nd", "SaleCondition", "BsmtFinType2","RoofStyle", "GarageCond", "ExterQual", "HeatingQC", "OverallCond")
for (name in col_to_remove){cat(which(colnames(home)==name)," ")}
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "Exterior1st", "Exterior2nd", "SaleCondition", "BsmtFinType2","RoofStyle", "GarageCond", "ExterQual", "HeatingQC", "OverallCond")
for (name in col_to_remove){cat(which(colnames(home)==name)," ")}
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "GarageCond", "Exterior1st", "Exterior2nd", "SaleCondition", "BsmtFinType2","RoofStyle", "ExterQual", "HeatingQC", "OverallCond")
for (name in col_to_remove){cat(which(colnames(home)==name)," ")}
home_streamlined = home[-c(5, 8, 21, 13, 37, 40, 51, 59, 22, 23, 66, 34, 20, 26, 38, 17)]
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
# Reducing our number of features using the 3 selection methods seen in class (forward, backward, both)
library(MASS)
# Forward method :
linear_select_variables_forward = stepAIC(full_model, data=home_streamlined, trace=0, direction=c("forward"), verbose = FALSE)
#summary(linear_select_variables_forward)
# Backward method
linear_select_variables_backward = stepAIC(full_model,~., trace=0, direction=c("backward") )
#summary(linear_select_variables_backward)
# Both
linear_select_variables_both = stepAIC(full_model, trace=0, direction=c("both"))
#summary(linear_select_variables_both)
extractAIC(linear_select_variables_forward)
extractAIC(linear_select_variables_backward)
extractAIC(linear_select_variables_both)
# Validate (or not) the postulates
par(mfrow=c(3,3))
plot(linear_select_variables_backward, which=1) # P1
plot(linear_select_variables_backward, which=3) # P2
acf(residuals(linear_select_variables_backward), main= "Auto-correlation plot") # P3
plot(linear_select_variables_backward, which=2) # P4
plot(linear_select_variables_backward, which=5) # Cook
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "GarageCond", "SaleCondition", "BsmtFinType2","RoofStyle", "ExterQual", "HeatingQC","Exterior1st", "Exterior2nd", "OverallCond")
for (name in col_to_remove){cat(which(colnames(home)==name)," ")}
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "GarageCond","Exterior1st", "Exterior2nd", "OverallCond", "HeatingQC", "SaleCondition", "BsmtFinType2","RoofStyle", "ExterQual")
for (name in col_to_remove){cat(which(colnames(home)==name)," ")}
home_streamlined = home[-c(5, 8, 21, 13, 37, 40, 51, 59, 22, 23, 17, 38, 66, 34, 20, 26)]
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
# Ancova on OverallQual and OverallCond
mod6 = lm(SalePrice~1 + OverallQual + ExterQual + OverallQual:ExterQuall, data = home)
# Ancova on OverallQual and OverallCond
mod6 = lm(SalePrice~1 + OverallQual + ExterQual + OverallQual:ExterQual, data = home)
anova(mod6)
# Test error
sqrt(mean(test$SalePrice - exp(predict.lm(linear_backward_without_outliers, test))) ^ 2))
# Test error
sqrt(mean(test$SalePrice - exp(predict.lm(linear_backward_without_outliers, test)) ^ 2))
load("DataProject.RData")
# Loading the preprocessed dataset
home = train[,2:ncol(train)]
#head(home)
summary(home)
cat("There are", sum(is.na(home)), "missing values in our dataframe.")
# Getting regressor types
#str(home, give.attr = FALSE)
home$OverallQual = as.factor(home$OverallQual)
home$OverallCond = as.factor(home$OverallCond)
home$MoSold = as.factor(home$MoSold)
home$MSSubClass = as.factor(home$MSSubClass)
home$Fireplaces = as.factor(home$Fireplaces)
# head(home)
# Extracting all numerical variables
nums = unlist(lapply(home, is.numeric))
home_numerical = (home[ , nums])
par(mfrow=c(1,2))
# A few observations on SalePrice.
hist(home_numerical$SalePrice, main = "SalePrice")
boxplot(home_numerical$SalePrice, main = "SalePrice")
cat("The mean of Saleprice is", mean(home_numerical$SalePrice), "whereas the median is higher at", median(home_numerical$SalePrice), "indicating that extreme values skew our data to the right.")
par(mfrow=c(1,3))
hist(log(home_numerical[,"SalePrice"]))
par(mfrow=c(1,2))
# Area
hist(home_numerical$LotArea, main = "LotArea")
boxplot(home_numerical$LotArea, main = "LotArea")
par(mfrow=c(1,2))
# Area
hist(home_numerical$log(LotArea), main = "LotArea")
par(mfrow=c(1,2))
# Area
hist(log(home_numerical$log(LotArea)o, main = "LotArea")
par(mfrow=c(1,2))
# Area
hist(log(home_numerical$LotArea), main = "LotArea")
boxplot(log(home_numerical$LotArea), main = "LotArea")
par(mfrow=c(1,2))
# Area
hist(home_numerical$LotArea), main = "LotArea")
par(mfrow=c(1,2))
# Area
hist((home_numerical$LotArea), main = "LotArea")
boxplot(home_numerical$LotArea), main = "LotArea")
par(mfrow=c(1,2))
# Area
hist((home_numerical$LotArea), main = "LotArea")
boxplot(home_numerical$LotArea), main = "LotArea")
par(mfrow=c(1,2))
# Area
hist((home_numerical$LotArea), main = "LotArea")
boxplot(home_numerical$LotArea) main = "LotArea")
par(mfrow=c(1,2))
# Area
hist((home_numerical$LotArea), main = "LotArea")
boxplot((home_numerical$LotArea), main = "LotArea")
par(mfrow=c(1,2))
# Area
hist((home_numerical$LotArea), main = "LotArea")
boxplot((home_numerical$LotArea), main = "LotArea")
home_numerical_output = home_numerical$SalePrice
home_numerical_features = home_numerical[,2:ncol(home_numerical)] # we will perform the PCA analysis on this dataset.
# Some elementary pruning and regrouping of categories
# Regrouping neighbourhoods of less than 20 and 50 sales together
table_neighborhood= table(home$Neighborhood)
table_neighborhood[order(table_neighborhood)]
levels(home$Neighborhood) <- c(levels(home$Neighborhood), "N_Under20Sales","N_Under50Sales")
home$Neighborhood[home$Neighborhood %in% c("Blueste","NPkVill","Veenker","BrDale","Blmngtn","MeadowV")] = "N_Under20Sales"
home$Neighborhood[home$Neighborhood %in% c("StoneBr","SWISU","ClearCr","IDOTRR","Timber","NoRidge","Mitchel")] = "N_Under50Sales"
# Roofstyle
table(home$RoofStyle)[order(table(home$RoofStyle))]
levels(home$RoofStyle) <- c(levels(home$RoofStyle), "RS_Other")
home$RoofStyle[home$RoofStyle %in% c("Shed","Mansard","Gambrel","Flat")] = "RS_Other"
# Condition 1
table(home$Condition1)[order(table(home$Condition1))]
levels(home$Condition1) <- c(levels(home$Condition1), "C_Other")
home$Condition1[home$Condition1 %in% c("RRNe","RRNn","PosA","RRAe","PosN","RRAn","Artery")] = "C_Other"
# ExterCond
table(home$ExterCond)[order(table(home$ExterCond))]
levels(home$ExterCond) <- c(levels(home$ExterCond), "EC_Other")
home$ExterCond[home$ExterCond %in% c("Po", "Ex", "Fa", "Gd")] = "EC_Other"
# OverallQual
table(home$OverallQual)
levels(home$OverallQual) <- c(levels(home$OverallQual), "Very_Low")
home$OverallQual[home$OverallQual %in% c("-4.27238846180047", "-3.28279659466729", "-2.38962301582022")] = "Very_Low"
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "GarageCond","Exterior1st", "Exterior2nd", "OverallCond", "HeatingQC", "SaleCondition", "BsmtFinType2","RoofStyle", "ExterQual")
for (name in col_to_remove){cat(which(colnames(home)==name)," ")}
home_streamlined = home[-c(5, 8, 21, 13, 37, 40, 51, 59, 22, 23, 17, 38, 66, 34, 20, 26)]
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
# Reducing our number of features using the 3 selection methods seen in class (forward, backward, both)
library(MASS)
# Forward method :
linear_select_variables_forward = stepAIC(full_model, data=home_streamlined, trace=0, direction=c("forward"), verbose = FALSE)
#summary(linear_select_variables_forward)
# Backward method
linear_select_variables_backward = stepAIC(full_model,~., trace=0, direction=c("backward") )
#summary(linear_select_variables_backward)
# Both
linear_select_variables_both = stepAIC(full_model, trace=0, direction=c("both"))
#summary(linear_select_variables_both)
# Validate (or not) the postulates
par(mfrow=c(3,3))
plot(linear_select_variables_backward, which=1) # P1
plot(linear_select_variables_backward, which=3) # P2
acf(residuals(linear_select_variables_backward), main= "Auto-correlation plot") # P3
plot(linear_select_variables_backward, which=2) # P4
plot(linear_select_variables_backward, which=5) # Cook
# Building the same regression model as before with our new dataframe
linear_backward_without_outliers <- lm(formula = log(SalePrice) ~ MSSubClass + MSZoning + LotFrontage +
log(LotArea) + LandContour + LotConfig + LandSlope + Neighborhood +
Condition1 + OverallQual + YearBuilt + YearRemodAdd + MasVnrType +
MasVnrArea + ExterCond + Foundation + BsmtCond + BsmtExposure +
BsmtFinSF1 + BsmtUnfSF + CentralAir + GrLivArea + BsmtFullBath +
FullBath + HalfBath + KitchenQual + Fireplaces + GarageType +
GarageCars + GarageQual + WoodDeckSF + MoSold + YrSold,, data = home_streamlined)
# Building the same regression model as before with our new dataframe
linear_backward_without_outliers <- lm(formula = log(SalePrice) ~ MSSubClass + MSZoning + LotFrontage +
LotArea + LandContour + LotConfig + LandSlope + Neighborhood +
Condition1 + OverallQual + YearBuilt + YearRemodAdd + MasVnrType +
MasVnrArea + ExterCond + Foundation + BsmtCond + BsmtExposure +
BsmtFinSF1 + BsmtUnfSF + CentralAir + GrLivArea + BsmtFullBath +
FullBath + HalfBath + KitchenQual + Fireplaces + GarageType +
GarageCars + GarageQual + WoodDeckSF + MoSold + YrSold,, data = home_streamlined)
# Test error
sqrt(mean(test$SalePrice - exp(predict.lm(linear_backward_without_outliers, test)) ^ 2))
# Overall quality
ggplot(home,
aes(x=OverallQual,
y=SalePrice,
colour= OverallQual,
group = OverallQual,
fill = OverallQual)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
# Area
par(mfrow=c(1,2))
library(ggplot2)
ggplot(home,
aes(x=MSZoning,
y=SalePrice,
colour=MSZoning,
group = MSZoning,
fill = MSZoning)) + geom_boxplot(alpha=0.5, outlier.alpha=0) +geom_jitter(width=0.1)
# Ancova on quality and area
mod4 = lm(SalePrice~1 + MSZoning + OverallQual + OverallQual:MSZoning, data = home)
anova(mod4)
# Ancova on OverallQual and OverallCond
mod5 = lm(SalePrice~1 + OverallQual + OverallCond + OverallQual:OverallCond, data = home)
anova(mod5)
# Roofstyle
table(home$RoofStyle)[order(table(home$RoofStyle))]
levels(home$RoofStyle) <- c(levels(home$RoofStyle), "RS_Other")
home$RoofStyle[home$RoofStyle %in% c("Shed","Mansard","Gambrel","Flat")] = "RS_Other"
# Condition 1
table(home$Condition1)[order(table(home$Condition1))]
levels(home$Condition1) <- c(levels(home$Condition1), "C_Other")
home$Condition1[home$Condition1 %in% c("RRNe","RRNn","PosA","RRAe","PosN","RRAn","Artery")] = "C_Other"
# ExterCond
table(home$ExterCond)[order(table(home$ExterCond))]
levels(home$ExterCond) <- c(levels(home$ExterCond), "EC_Other")
home$ExterCond[home$ExterCond %in% c("Po", "Ex", "Fa", "Gd")] = "EC_Other"
# OverallQual
table(home$OverallQual)
levels(home$OverallQual) <- c(levels(home$OverallQual), "Very_Low")
home$OverallQual[home$OverallQual %in% c("-4.27238846180047", "-3.28279659466729", "-2.38962301582022")] = "Very_Low"
home_streamlined = home[-c(5, 8, 21, 13, 37, 40, 51, 59, 22, 23, 17, 38, 66, 34, 20, 26)]
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
extractAIC(linear_select_variables_forward)
extractAIC(linear_select_variables_backward)
extractAIC(linear_select_variables_both)
# Validate (or not) the postulates
par(mfrow=c(3,3))
plot(linear_select_variables_backward, which=1) # P1
plot(linear_select_variables_backward, which=3) # P2
acf(residuals(linear_select_variables_backward), main= "Auto-correlation plot") # P3
plot(linear_select_variables_backward, which=2) # P4
plot(linear_select_variables_backward, which=5) # Cook
winsorization(home$SalePrice, fraction=.05)
winsorization (x, fraction=.05)
winsorization (x, fraction=.05)
function winsorization (x, fraction=.05)
function (x, fraction=.05)
{if(length(fraction) != 1 || fraction < 0 ||fraction > 0.5) {stop("bad value for 'fraction'")}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- lim[1]
x[ x > lim[2] ] <- lim[2]
x}
winsorization(home$SalePrice, fraction=.05)
function (x, fraction=.05)
{if(length(fraction) != 1 || fraction < 0 ||fraction > 0.5) {stop("bad value for 'fraction'")}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- lim[1]
x[ x > lim[2] ] <- lim[2]
x}
(home$SalePrice, fraction=.05)
winsor1
winsor1 function (x, fraction=.05)
winsor1 = function (x, fraction=.05)
{if(length(fraction) != 1 || fraction < 0 ||fraction > 0.5) {stop("bad value for 'fraction'")}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- lim[1]
x[ x > lim[2] ] <- lim[2]
x}
winsor1(home$SalePrice, fraction=.05)
winsor1 = function (x, fraction=.05)
{if(length(fraction) != 1 || fraction < 0 ||fraction > 0.5) {stop("bad value for 'fraction'")}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- lim[1]
x[ x > lim[2] ] <- lim[2]
x}
boxplot(winsor1(home$SalePrice, fraction=.05))
winsor1 = function (x, fraction=.05)
{if(length(fraction) != 1 || fraction < 0 ||fraction > 0.5) {stop("bad value for 'fraction'")}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- lim[1]
x[ x > lim[2] ] <- lim[2]
x}
home$SalePrice= (winsor1(home$SalePrice, fraction=.05))
# Elementary pruning and regrouping of categories
# Regrouping neighbourhoods of less than 20 and 50 sales together
table_neighborhood= table(home$Neighborhood)
table_neighborhood[order(table_neighborhood)]
levels(home$Neighborhood) <- c(levels(home$Neighborhood), "N_Under20Sales","N_Under50Sales")
home$Neighborhood[home$Neighborhood %in% c("Blueste","NPkVill","Veenker","BrDale","Blmngtn","MeadowV")] = "N_Under20Sales"
home$Neighborhood[home$Neighborhood %in% c("StoneBr","SWISU","ClearCr","IDOTRR","Timber","NoRidge","Mitchel")] = "N_Under50Sales"
# Roofstyle
table(home$RoofStyle)[order(table(home$RoofStyle))]
levels(home$RoofStyle) <- c(levels(home$RoofStyle), "RS_Other")
home$RoofStyle[home$RoofStyle %in% c("Shed","Mansard","Gambrel","Flat")] = "RS_Other"
# Condition 1
table(home$Condition1)[order(table(home$Condition1))]
levels(home$Condition1) <- c(levels(home$Condition1), "C_Other")
home$Condition1[home$Condition1 %in% c("RRNe","RRNn","PosA","RRAe","PosN","RRAn","Artery")] = "C_Other"
# ExterCond
table(home$ExterCond)[order(table(home$ExterCond))]
levels(home$ExterCond) <- c(levels(home$ExterCond), "EC_Other")
home$ExterCond[home$ExterCond %in% c("Po", "Ex", "Fa", "Gd")] = "EC_Other"
# OverallQual
table(home$OverallQual)
levels(home$OverallQual) <- c(levels(home$OverallQual), "Very_Low")
home$OverallQual[home$OverallQual %in% c("-4.27238846180047", "-3.28279659466729", "-2.38962301582022")] = "Very_Low"
col_to_remove = c("Street", "Utilities", "RoofMatl", "Condition2","Heating", "Electrical", "Functional", "GarageCond","Exterior1st", "Exterior2nd", "OverallCond", "HeatingQC", "SaleCondition", "BsmtFinType2","RoofStyle", "ExterQual")
for (name in col_to_remove){cat(which(colnames(home)==name)," ")}
home_streamlined = home[-c(5, 8, 21, 13, 37, 40, 51, 59, 22, 23, 17, 38, 66, 34, 20, 26)]
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
full_model = lm(log(SalePrice)~., data = home_streamlined)
summary(full_model)
# Reducing our number of features using the 3 selection methods seen in class (forward, backward, both)
library(MASS)
# Forward method :
linear_select_variables_forward = stepAIC(full_model, data=home_streamlined, trace=0, direction=c("forward"), verbose = FALSE)
#summary(linear_select_variables_forward)
# Backward method
linear_select_variables_backward = stepAIC(full_model,~., trace=0, direction=c("backward") )
#summary(linear_select_variables_backward)
# Both
linear_select_variables_both = stepAIC(full_model, trace=0, direction=c("both"))
#summary(linear_select_variables_both)
extractAIC(linear_select_variables_forward)
extractAIC(linear_select_variables_backward)
extractAIC(linear_select_variables_both)
# Validate (or not) the postulates
par(mfrow=c(3,3))
plot(linear_select_variables_backward, which=1) # P1
plot(linear_select_variables_backward, which=3) # P2
acf(residuals(linear_select_variables_backward), main= "Auto-correlation plot") # P3
plot(linear_select_variables_backward, which=2) # P4
plot(linear_select_variables_backward, which=5) # Cook
# Plotting our regression outliers
home_streamlined[c(199, 596, 336, 692, 633, 618, 323,809),1:ncol(home_streamlined)]
median(home_streamlined$SalePrice)
# Finding the outliers of our model
outlierTest(linear_select_variables_backward)
# Building the dataframe without those outliers
home_no_outliers = home_streamlined[-c(199, 596, 336, 692, 633), ]
# Displaying our regression model to use it on our new dataframe without outliers
linear_select_variables_backward
# Building the same regression model as before with our new dataframe
linear_backward_without_outliers <- lm(formula = log(SalePrice) ~ MSSubClass + MSZoning + LotFrontage +
LotArea + LotConfig + Neighborhood + Condition1 + OverallQual +
YearBuilt + YearRemodAdd + MasVnrType + MasVnrArea + BsmtCond +
BsmtExposure + BsmtFinSF1 + BsmtUnfSF + TotalBsmtSF + CentralAir +
`1stFlrSF` + GrLivArea + BsmtFullBath + FullBath + HalfBath +
KitchenQual + Fireplaces + GarageType + GarageYrBlt + GarageCars +
GarageQual + WoodDeckSF + MoSold + YrSold, data = home_streamlined)
# Looking at the results
summary(linear_backward_without_outliers)
# Testing the postulates on our new model
par(mfrow=c(3,3))
plot(linear_backward_without_outliers, which=1) # P1
plot(linear_backward_without_outliers, which=3) # P2
acf(residuals(linear_backward_without_outliers), main= "Auto-correlation plot") # P3
plot(linear_backward_without_outliers, which=2) # P4
plot(linear_backward_without_outliers, which=5) # outliers wusing cook's distance
test = test[,2:ncol(test)]
# Reaffecting test's features to factors
test$OverallQual = as.factor(test$OverallQual)
test$OverallCond = as.factor(test$OverallCond)
test$MoSold = as.factor(test$MoSold)
test$MSSubClass = as.factor(test$MSSubClass)
test$Fireplaces = as.factor(test$Fireplaces)
# Regrouping neighbourhoods of less than 20 and 50 sales together
levels(test$Neighborhood) <- c(levels(test$Neighborhood), "N_Under20Sales","N_Under50Sales")
test$Neighborhood[test$Neighborhood %in% c("Blueste","NPkVill","Veenker","BrDale","Blmngtn","MeadowV")] = "N_Under20Sales"
test$Neighborhood[test$Neighborhood %in% c("StoneBr","SWISU","ClearCr","IDOTRR","Timber","NoRidge","Mitchel")] = "N_Under50Sales"
# Roofstyle
levels(test$RoofStyle) <- c(levels(test$RoofStyle), "RS_Other")
test$RoofStyle[test$RoofStyle %in% c("Shed","Mansard","Gambrel","Flat")] = "RS_Other"
# Condition 1
levels(test$Condition1) <- c(levels(test$Condition1), "C_Other")
test$Condition1[test$Condition1 %in% c("RRNe","RRNn","PosA","RRAe","PosN","RRAn","Artery")] = "C_Other"
# ExterCond
levels(test$ExterCond) <- c(levels(test$ExterCond), "EC_Other")
test$ExterCond[test$ExterCond %in% c("Po", "Ex", "Fa", "Gd")] = "EC_Other"
# OverallQual
levels(test$OverallQual) <- c(levels(test$OverallQual), "Very_Low")
test$OverallQual[test$OverallQual %in% c("-4.27238846180047", "-3.28279659466729", "-2.38962301582022")] = "Very_Low"
# Test error
sqrt(mean(test$SalePrice - exp(predict.lm(linear_backward_without_outliers, test)) ^ 2))
# Test error
sqrt(mean(log(test$SalePrice) - predict.lm(linear_backward_without_outliers, test) ^ 2))
predict.lm(linear_backward_without_outliers
predict.lm(linear_backward_without_outliers)
predict.lm(linear_backward_without_outliers, test)
# Test error
mean(log(test$SalePrice) - predict.lm(linear_backward_without_outliers, test) ^ 2)
# Test error
mean((log(test$SalePrice) - predict.lm(linear_backward_without_outliers, test) ^ 2)
# Test error
mean(log(test$SalePrice) - predict.lm(linear_backward_without_outliers, test)^2)
# Test error
mean(
log(test$SalePrice)-predict.lm(linear_backward_without_outliers, test))^2
# Test error
mean(log(test$SalePrice)-predict.lm(linear_backward_without_outliers, test))^2
# Test error
sqrt(mean(test$SalePrice-exp(predict.lm(linear_backward_without_outliers, test)))^2)
# Looking at the results
#summary(linear_backward_without_outliers)
# Displaying our regression model to use it on our new dataframe without outliers
# linear_select_variables_backward
# Finding the outliers of our model
outlierTest(linear_select_variables_backward)
# Plotting our regression outliers
home_streamlined[c(199, 336, 596, 633),1:ncol(home_streamlined)]
median(home_streamlined$SalePrice)
# Plotting our regression outliers
home_streamlined[c(199, 336, 596, 633),1:ncol(home_streamlined)]
# Building the dataframe without those outliers
home_no_outliers = home_streamlined[-c(199, 336, 596, 633), ]
# Displaying our regression model to use it on our new dataframe without outliers
linear_select_variables_backward
# Building the same regression model as before with our new dataframe
linear_backward_without_outliers <- lm(formula = log(SalePrice) ~ MSSubClass + MSZoning + LotFrontage +
LotArea + LotConfig + Neighborhood + Condition1 + OverallQual +
YearBuilt + YearRemodAdd + MasVnrType + MasVnrArea + BsmtCond +
BsmtExposure + BsmtFinSF1 + BsmtUnfSF + TotalBsmtSF + CentralAir +
`1stFlrSF` + GrLivArea + BsmtFullBath + FullBath + HalfBath +
KitchenQual + Fireplaces + GarageType + GarageYrBlt + GarageCars +
GarageQual + WoodDeckSF + MoSold + YrSold, data = home_streamlined)
# Looking at the results
summary(linear_backward_without_outliers)
# Looking at the results
#summary(linear_backward_without_outliers)
# Testing the postulates on our new model
par(mfrow=c(3,3))
plot(linear_backward_without_outliers, which=1) # P1
plot(linear_backward_without_outliers, which=3) # P2
acf(residuals(linear_backward_without_outliers), main= "Auto-correlation plot") # P3
plot(linear_backward_without_outliers, which=2) # P4
plot(linear_backward_without_outliers, which=5) # outliers wusing cook's distance
test = test[,2:ncol(test)]
# Reaffecting test's features to factors
test$OverallQual = as.factor(test$OverallQual)
test$OverallCond = as.factor(test$OverallCond)
test$MoSold = as.factor(test$MoSold)
test$MSSubClass = as.factor(test$MSSubClass)
load("DataProject.RData")
test = test[,2:ncol(test)]
# Reaffecting test's features to factors
test$OverallQual = as.factor(test$OverallQual)
test$OverallCond = as.factor(test$OverallCond)
test$MoSold = as.factor(test$MoSold)
test$MSSubClass = as.factor(test$MSSubClass)
test$Fireplaces = as.factor(test$Fireplaces)
# Regrouping neighbourhoods of less than 20 and 50 sales together
levels(test$Neighborhood) <- c(levels(test$Neighborhood), "N_Under20Sales","N_Under50Sales")
test$Neighborhood[test$Neighborhood %in% c("Blueste","NPkVill","Veenker","BrDale","Blmngtn","MeadowV")] = "N_Under20Sales"
test$Neighborhood[test$Neighborhood %in% c("StoneBr","SWISU","ClearCr","IDOTRR","Timber","NoRidge","Mitchel")] = "N_Under50Sales"
# Roofstyle
levels(test$RoofStyle) <- c(levels(test$RoofStyle), "RS_Other")
test$RoofStyle[test$RoofStyle %in% c("Shed","Mansard","Gambrel","Flat")] = "RS_Other"
# Condition 1
levels(test$Condition1) <- c(levels(test$Condition1), "C_Other")
test$Condition1[test$Condition1 %in% c("RRNe","RRNn","PosA","RRAe","PosN","RRAn","Artery")] = "C_Other"
# ExterCond
levels(test$ExterCond) <- c(levels(test$ExterCond), "EC_Other")
test$ExterCond[test$ExterCond %in% c("Po", "Ex", "Fa", "Gd")] = "EC_Other"
# OverallQual
levels(test$OverallQual) <- c(levels(test$OverallQual), "Very_Low")
test$OverallQual[test$OverallQual %in% c("-4.27238846180047", "-3.28279659466729", "-2.38962301582022")] = "Very_Low"
# Test error
sqrt(mean(test$SalePrice-exp(predict.lm(linear_backward_without_outliers, test)))^2)
